AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Github Cognito OpenID Wrapper (SSO)

Mappings:
  Tags:
    Global:
      ProjectId: 'gitrospect_githubopenidwrapper'
  Lambda:
    stg:
      SecretName: 'gitrospectgithuboidcwrapper/stg/oidcsecrets'
      SubDomainForIdpGithubWrapper: 'idpgithubstg'
      NODEENV: 'development'
      ALBLOGINURL: 'https://apis.gitrospect.com/pubapi/login'
      IDPURL: 'https://idpstg.gitrospect.com/oauth2/idpresponse'
    prd:
      SecretName: 'gitrospectgithuboidcwrapper/prd/oidcsecrets'
      SubDomainForIdpGithubWrapper: 'idpgithubprd'
      NODEENV: 'production'
      ALBLOGINURL: 'https://apip.gitrospect.com/pubapi/login'
      IDPURL: 'https://idpprd.gitrospect.com/oauth2/idpresponse'

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 15
    Architectures:
      - arm64
    Environment:
      Variables:
        ALB_LOGIN_URL: !FindInMap 
          - Lambda
          - !Ref MyDeployEnv
          - ALBLOGINURL
        IDP_URL: !FindInMap 
          - Lambda
          - !Ref MyDeployEnv
          - IDPURL
        GITHUB_API_URL:
          Ref: GitHubUrlParameter
        GITHUB_LOGIN_URL:
          Ref: GitHubLoginUrlParameter
        NODE_ENV: !FindInMap 
          - Lambda
          - !Ref MyDeployEnv
          - NODEENV
        SecretName: !FindInMap 
          - Lambda
          - !Ref MyDeployEnv
          - SecretName
        Stage: !Ref MyDeployEnv
        DebugLevel: debug
        DynameDbTableForGithubState: !Sub githubidpwrapper-${MyDeployEnv}-githubidpstate

    Tags:
        Project: !FindInMap [Tags, Global, ProjectId]
    
Parameters:
  MyDeployEnv:
    Type: String
    Default: stg
    AllowedValues:
      - stg
      - prd
  GitHubUrlParameter:
    Type: String
    Default: "https://api.github.com"
    MinLength: 1
  GitHubLoginUrlParameter:
    Type: String
    Default: "https://github.com"
    MinLength: 1
  GithubCognitoWrapperLambdaRoleArn:
    Type: String
  MyCertificateArnEUWest1:
    Type: String
  MyCertificateArnUSEast1:
    Type: String
  MyRoute53HostedZoneId:
    Type: String
  MyRoute53Domain:
    Type: String

#
# These values parameters are now passed via aws secret manager instead of via the yml
#  GITHUB_CLIENT_ID)
#  GITHUB_CLIENT_SECRET: 
#  COGNITO_REDIRECT_URI:

Resources: 
  DynamoDBTablegithubidpstate:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub githubidpwrapper-${MyDeployEnv}-githubidpstate
      AttributeDefinitions: 
        - AttributeName: githubUsername
          AttributeType: S
      KeySchema: 
        - AttributeName: githubUsername
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Tags:
        - Key: Project
          Value: !FindInMap [Tags, Global, ProjectId]

  GithubOIDCWrapperSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: String
      SecretString: '{
          "GITHUB_CLIENT_ID": "",
          "GITHUB_CLIENT_SECRET": "",
          "COGNITO_REDIRECT_URI": "",
          "B64_JWT_KEY_PUBLIC": "",
          "B64_JWT_KEY_PRIVATE": ""
        }'
      Name: !FindInMap [Lambda, !Ref MyDeployEnv, SecretName]      
      Tags: 
        - 
          Key: Project
          Value: !FindInMap [Tags, Global, ProjectId]

  #
  # these slows down deployment too much so instead create the domain by hand via api gateway custom domains 
  # GithubOAuthApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     Name: !Sub idpgithub-${MyDeployEnv}-${MyIterIncrement}
  #     StageName: !Ref MyDeployEnv
  #     OpenApiVersion: "2.0"
  #     Domain:
  #       DomainName: !Sub 
  #         - '${Prefix}.${MyRoute53Domain}'
  #         - Prefix: !FindInMap [Lambda, !Ref MyDeployEnv, SubDomainForIdpGithubWrapper]
  #       CertificateArn: !Ref MyCertificateArnUSEast1
  #       EndpointConfiguration: EDGE
  #       SecurityPolicy: TLS_1_2
  #       Route53:
  #         HostedZoneId: !Ref MyRoute53HostedZoneId
  #       schemes: https

  OpenIdDiscovery:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Role: !Ref GithubCognitoWrapperLambdaRoleArn
      Handler: openIdConfiguration.handler
      FunctionName: !Sub githubidpwrapper-${MyDeployEnv}-openIdConfiguration
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /.well-known/openid-configuration
            Method: get
            # RestApiId: !Ref GithubOAuthApi
  Authorize:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Role: !Ref GithubCognitoWrapperLambdaRoleArn
      Handler: authorize.handler
      FunctionName: !Sub githubidpwrapper-${MyDeployEnv}-authorize
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /authorize
            Method: get
            # RestApiId: !Ref GithubOAuthApi
  Token:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Role: !Ref GithubCognitoWrapperLambdaRoleArn
      Handler: token.handler
      FunctionName: !Sub githubidpwrapper-${MyDeployEnv}-token
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /token
            Method: get
            # RestApiId: !Ref GithubOAuthApi
        PostResource:
          Type: Api
          Properties:
            Path: /token
            Method: post
            # RestApiId: !Ref GithubOAuthApi
  UserInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Role: !Ref GithubCognitoWrapperLambdaRoleArn
      Handler: userinfo.handler
      FunctionName: !Sub githubidpwrapper-${MyDeployEnv}-userinfo
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /userinfo
            Method: get
            # RestApiId: !Ref GithubOAuthApi
        PostResource:
          Type: Api
          Properties:
            Path: /userinfo
            Method: post
            # RestApiId: !Ref GithubOAuthApi
  Jwks:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Role: !Ref GithubCognitoWrapperLambdaRoleArn
      Handler: jwks.handler
      FunctionName: !Sub githubidpwrapper-${MyDeployEnv}-jwks
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /.well-known/jwks.json
            Method: get
            # RestApiId: !Ref GithubOAuthApi
  GithubpostauthCallback:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Role: !Ref GithubCognitoWrapperLambdaRoleArn
      Handler: githubpostauthcallback.handler
      FunctionName: !Sub githubidpwrapper-${MyDeployEnv}-githubpostauthcallback
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /githubpostauthcallback
            Method: get
            # RestApiId: !Ref GithubOAuthApi

